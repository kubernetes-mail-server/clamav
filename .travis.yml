sudo: required

services:
  - docker

language: generic

env:
  global:
    - NAME=clamav
    - IMAGE=kubernetesmailserver/${NAME}
    - NAMESPACE=mail-server
    - REPLICAS=1
    - CACHE_FOLDER=$HOME/docker-images
    - CACHE_FILE=${CACHE_FOLDER}/${NAME}-${TRAVIS_COMMIT}.tgz
    - secure: "dbdlU4CKJNGYxd3npQ0UirKzg5e0dflWr3G4Y+o/mi/cG13Py702NPS7ZJcz1ygx/xUKbWoanFbMmgH7+naS9e7bAE4npn11CJ1uz5ByP5ADT8Baqqnehp9gLEPt+E7hf1F4GXzUMU5KxQ8fkiDDhKKjheEMCq8BNXsU9H0QTB7cQ3P3RaSW7ZGcWDEUd6jIrebVRApxhSYnQBpvIXsHeCCfYLm2ibDzhJvGIelzJ122mQU2pr/SbjMnFdcwByNKbDgK2ZsWUoNDSsNkUYeNQAXg/HIDQNYtLaxX+9upGz73OQYEwEeQX+DJNPLsItZ5voiomVhpDrAvU1gB5BgbXVUJYIhLrhl1/yO6YofvGQrnO4MENZtwzFDuZ+Q+mHiUHhzZ3xL6AyGkc6x4MKC4MePevKltSQl0VtlOF2idP8xvcggC1FVyLpjSOwAvBks8F2u4EciiJ+vm5OqnCwzy0/cEehqKugrhxcug4D7+NXJwYEe+6BUABxn2DRaN8y/kU7fXruSVGpPWB7EFj49KRSiFAeHxrLJBuh4obArFXLGj2+auNRR3Eo1R1PLRmyZRoW/+Ch6ZpjT65S1UDT4EcyUta208DbPLtNsj8PCW+pTz16XGklh8+JoxymF6oWJ77DuG6pG/kM6moIoJOt5j0BvhYFi/OTcvUdjsV7/lU6w="
    - secure: "bPDvyTdX7O3XML6L8EVxdYH0n/Y+qJCyRWCz7KRGJjGXgEO/I/YFDJ5tmxzkVisV6WRwMKi+SOLw61PnaLnXYfYoLGXbWOWCRA2UkwhhjNFSoEY5eICp1nBWt754wBcji0KLERTwc57Z8cHdySSC/52VrPmZR8hgveoA4JU8K2+K9IiuuetJPaCQFW6geEii4i8nNuzC5uyQXe2+T1tXCxeEtWFZ7QhsXviXUkIOEDCkgWTwI+Dly7ce+qqcVCK08/d+Yl1bpiOBppCw7TIoHxTTxt5awYE+YUjzMTmV6j5uXyDbzb5kBDQoRCACZMIKfzOTPmXDZDGC+Uoya7hV3babD13d1AHff+HqUymUmM6IOfPwoXwZFtmOpAVpVW7cqvTqOD4vv/t+Q69nw6u1qUPrg4IokUdYnVgLvqiliT1XXuI49FxzUsTzQBEoavtKvDierGUEQTDLJbDhnQXga7ECLHXzfZBKuC+eky1coTGPGBv5bKqm/4/TOeece8siIOQNlHQuCPHqVl0hcLN3ANgzYvmozqAQ5vFIi9tJp+3FaXuuzQVQ2/L34fQBya4bK2bPI3nHBrYxHLQbE7Q+7ubkRkXHJxcixWbKyUG7FVWg6BkjZAWp5D9cUvgYcQln5vvjFmiV6vQ8oCt8iyDquw/RetP9V/8hqxBmCK4lzLQ="

before_install:
  - openssl aes-256-cbc -K $encrypted_c25bfdc08df8_key -iv $encrypted_c25bfdc08df8_iv -in kubeconfig.enc -out kubeconfig -d
  - KUBE_LATEST_VERSION="v1.19.0"
  - HELM_LATEST_VERSION="v3.3.1"
  - HELM=https://get.helm.sh/helm-${HELM_LATEST_VERSION}-linux-amd64.tar.gz
  - KUBECTL=https://storage.googleapis.com/kubernetes-release/release/${KUBE_LATEST_VERSION}/bin/linux/amd64/kubectl
  - curl -L ${KUBECTL} -o $PWD/kubectl
  - curl -L ${HELM} | tar xzO linux-amd64/helm > $PWD/helm
  - chmod +x $PWD/helm $PWD/kubectl
  - export -p PATH=$PATH:$PWD

jobs:
  include:
    - stage: build
      name: Build docker image
      script:
        - docker build -t ${IMAGE} ${PWD}
        - mkdir -p ${CACHE_FOLDER}
        - docker save ${IMAGE} | gzip -c > ${CACHE_FILE}
    - stage: push
      name: Tag and push the master build as latest
      if: branch = master AND type != pull_request
      script:
        - ls -la ${CACHE_FOLDER}
        - if [[ -f ${CACHE_FILE} ]]; then docker load -i ${CACHE_FILE}; fi
        - docker images
        - docker tag ${IMAGE} ${IMAGE}:latest
        - docker tag ${IMAGE} ${IMAGE}:${TRAVIS_BUILD_ID}
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push ${IMAGE}:latest
        - docker push ${IMAGE}:${TRAVIS_BUILD_ID}
    - stage: push
      name: Tag and push the version build using github tag name
      if: branch != master AND type != pull_request
      script:
        - ls -la ${CACHE_FOLDER}
        - if [[ -f ${CACHE_FILE} ]]; then docker load -i ${CACHE_FILE}; fi
        - docker images
        - docker tag ${IMAGE} ${IMAGE}:${TRAVIS_TAG}
        - docker tag ${IMAGE} ${IMAGE}:${TRAVIS_BUILD_ID}
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push ${IMAGE}:${TRAVIS_TAG}
        - docker push ${IMAGE}:${TRAVIS_BUILD_ID}
    - stage: deploy
      name: Deploy the master branch to the kubernetes cluster
      if: branch = master and type != pull_request
      script:
        - export KUBECONFIG=$PWD/kubeconfig
        - kubectl get pods -n ${NAMESPACE}
        - kubectl scale --replicas=0 -n ${NAMESPACE} deployment/${NAME} || true
        - kubectl get deployments -n ${NAMESPACE}
        - helm template
            --set name=${NAME}
            --set namespace=${NAMESPACE}
            --set port=$(kubectl get cm -n ${NAMESPACE} services-info -o=jsonpath="{.data.CLAMAV_PORT}")
            --set repository=${IMAGE}:${TRAVIS_BUILD_ID}
            $PWD/kubernetes | kubectl apply -f -
        - kubectl scale --replicas=${REPLICAS} -n ${NAMESPACE} deployment/${NAME}
        - kubectl get deployments -n ${NAMESPACE}
    - stage: cleanup
      name: Remove the docker image from the cache
      script:
        - rm -rf ${CACHE_FILE}

cache:
  bundler: true
  directories:
    - ${CACHE_FOLDER}
